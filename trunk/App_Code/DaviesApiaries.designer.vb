'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4206
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="DaviesApiaries")>  _
Partial Public Class DaviesApiariesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertActivity(instance As Activity)
    End Sub
  Partial Private Sub UpdateActivity(instance As Activity)
    End Sub
  Partial Private Sub DeleteActivity(instance As Activity)
    End Sub
  Partial Private Sub InsertActivityType(instance As ActivityType)
    End Sub
  Partial Private Sub UpdateActivityType(instance As ActivityType)
    End Sub
  Partial Private Sub DeleteActivityType(instance As ActivityType)
    End Sub
  Partial Private Sub InsertApiarySiteActivity(instance As ApiarySiteActivity)
    End Sub
  Partial Private Sub UpdateApiarySiteActivity(instance As ApiarySiteActivity)
    End Sub
  Partial Private Sub DeleteApiarySiteActivity(instance As ApiarySiteActivity)
    End Sub
  Partial Private Sub InsertArea(instance As Area)
    End Sub
  Partial Private Sub UpdateArea(instance As Area)
    End Sub
  Partial Private Sub DeleteArea(instance As Area)
    End Sub
  Partial Private Sub InsertPrimaryResource(instance As PrimaryResource)
    End Sub
  Partial Private Sub UpdatePrimaryResource(instance As PrimaryResource)
    End Sub
  Partial Private Sub DeletePrimaryResource(instance As PrimaryResource)
    End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertApiarySite(instance As ApiarySite)
    End Sub
  Partial Private Sub UpdateApiarySite(instance As ApiarySite)
    End Sub
  Partial Private Sub DeleteApiarySite(instance As ApiarySite)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DaviesApiariesConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Activities() As System.Data.Linq.Table(Of Activity)
		Get
			Return Me.GetTable(Of Activity)
		End Get
	End Property
	
	Public ReadOnly Property ActivityTypes() As System.Data.Linq.Table(Of ActivityType)
		Get
			Return Me.GetTable(Of ActivityType)
		End Get
	End Property
	
	Public ReadOnly Property ApiarySiteActivities() As System.Data.Linq.Table(Of ApiarySiteActivity)
		Get
			Return Me.GetTable(Of ApiarySiteActivity)
		End Get
	End Property
	
	Public ReadOnly Property Areas() As System.Data.Linq.Table(Of Area)
		Get
			Return Me.GetTable(Of Area)
		End Get
	End Property
	
	Public ReadOnly Property PrimaryResources() As System.Data.Linq.Table(Of PrimaryResource)
		Get
			Return Me.GetTable(Of PrimaryResource)
		End Get
	End Property
	
	Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property ApiarySites() As System.Data.Linq.Table(Of ApiarySite)
		Get
			Return Me.GetTable(Of ApiarySite)
		End Get
	End Property
End Class

<Table(Name:="dbo.Activities")>  _
Partial Public Class Activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ActivityID As Integer
	
	Private _ActivityTypeID As System.Nullable(Of Integer)
	
	Private _ActivityDescription As String
	
	Private _ActivityDate As System.Nullable(Of Date)
	
	Private _ActivityMap As String
	
	Private _ApiarySiteActivities As EntitySet(Of ApiarySiteActivity)
	
	Private _ActivityType As EntityRef(Of ActivityType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnActivityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnActivityIDChanged()
    End Sub
    Partial Private Sub OnActivityTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnActivityTypeIDChanged()
    End Sub
    Partial Private Sub OnActivityDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnActivityDescriptionChanged()
    End Sub
    Partial Private Sub OnActivityDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivityDateChanged()
    End Sub
    Partial Private Sub OnActivityMapChanging(value As String)
    End Sub
    Partial Private Sub OnActivityMapChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApiarySiteActivities = New EntitySet(Of ApiarySiteActivity)(AddressOf Me.attach_ApiarySiteActivities, AddressOf Me.detach_ApiarySiteActivities)
		Me._ActivityType = CType(Nothing, EntityRef(Of ActivityType))
		OnCreated
	End Sub
	
	<Column(Storage:="_ActivityID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ActivityID() As Integer
		Get
			Return Me._ActivityID
		End Get
		Set
			If ((Me._ActivityID = value)  _
						= false) Then
				Me.OnActivityIDChanging(value)
				Me.SendPropertyChanging
				Me._ActivityID = value
				Me.SendPropertyChanged("ActivityID")
				Me.OnActivityIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActivityTypeID", DbType:="Int")>  _
	Public Property ActivityTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._ActivityTypeID
		End Get
		Set
			If (Me._ActivityTypeID.Equals(value) = false) Then
				If Me._ActivityType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnActivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ActivityTypeID = value
				Me.SendPropertyChanged("ActivityTypeID")
				Me.OnActivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActivityDescription", DbType:="VarChar(4000)")>  _
	Public Property ActivityDescription() As String
		Get
			Return Me._ActivityDescription
		End Get
		Set
			If (String.Equals(Me._ActivityDescription, value) = false) Then
				Me.OnActivityDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ActivityDescription = value
				Me.SendPropertyChanged("ActivityDescription")
				Me.OnActivityDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActivityDate", DbType:="DateTime")>  _
	Public Property ActivityDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivityDate
		End Get
		Set
			If (Me._ActivityDate.Equals(value) = false) Then
				Me.OnActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivityDate = value
				Me.SendPropertyChanged("ActivityDate")
				Me.OnActivityDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActivityMap", DbType:="VarChar(255)")>  _
	Public Property ActivityMap() As String
		Get
			Return Me._ActivityMap
		End Get
		Set
			If (String.Equals(Me._ActivityMap, value) = false) Then
				Me.OnActivityMapChanging(value)
				Me.SendPropertyChanging
				Me._ActivityMap = value
				Me.SendPropertyChanged("ActivityMap")
				Me.OnActivityMapChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Activity_ApiarySiteActivity", Storage:="_ApiarySiteActivities", ThisKey:="ActivityID", OtherKey:="ActivityID")>  _
	Public Property ApiarySiteActivities() As EntitySet(Of ApiarySiteActivity)
		Get
			Return Me._ApiarySiteActivities
		End Get
		Set
			Me._ApiarySiteActivities.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ActivityType_Activity", Storage:="_ActivityType", ThisKey:="ActivityTypeID", OtherKey:="ActivityTypeID", IsForeignKey:=true)>  _
	Public Property ActivityType() As ActivityType
		Get
			Return Me._ActivityType.Entity
		End Get
		Set
			Dim previousValue As ActivityType = Me._ActivityType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ActivityType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ActivityType.Entity = Nothing
					previousValue.Activities.Remove(Me)
				End If
				Me._ActivityType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activities.Add(Me)
					Me._ActivityTypeID = value.ActivityTypeID
				Else
					Me._ActivityTypeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ActivityType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApiarySiteActivities(ByVal entity As ApiarySiteActivity)
		Me.SendPropertyChanging
		entity.Activity = Me
	End Sub
	
	Private Sub detach_ApiarySiteActivities(ByVal entity As ApiarySiteActivity)
		Me.SendPropertyChanging
		entity.Activity = Nothing
	End Sub
End Class

<Table(Name:="dbo.ActivityType")>  _
Partial Public Class ActivityType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ActivityTypeID As Integer
	
	Private _ActivityTypeDescription As String
	
	Private _Activities As EntitySet(Of Activity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnActivityTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnActivityTypeIDChanged()
    End Sub
    Partial Private Sub OnActivityTypeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnActivityTypeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activities = New EntitySet(Of Activity)(AddressOf Me.attach_Activities, AddressOf Me.detach_Activities)
		OnCreated
	End Sub
	
	<Column(Storage:="_ActivityTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ActivityTypeID() As Integer
		Get
			Return Me._ActivityTypeID
		End Get
		Set
			If ((Me._ActivityTypeID = value)  _
						= false) Then
				Me.OnActivityTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ActivityTypeID = value
				Me.SendPropertyChanged("ActivityTypeID")
				Me.OnActivityTypeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActivityTypeDescription", DbType:="VarChar(255)")>  _
	Public Property ActivityTypeDescription() As String
		Get
			Return Me._ActivityTypeDescription
		End Get
		Set
			If (String.Equals(Me._ActivityTypeDescription, value) = false) Then
				Me.OnActivityTypeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ActivityTypeDescription = value
				Me.SendPropertyChanged("ActivityTypeDescription")
				Me.OnActivityTypeDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ActivityType_Activity", Storage:="_Activities", ThisKey:="ActivityTypeID", OtherKey:="ActivityTypeID")>  _
	Public Property Activities() As EntitySet(Of Activity)
		Get
			Return Me._Activities
		End Get
		Set
			Me._Activities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activities(ByVal entity As Activity)
		Me.SendPropertyChanging
		entity.ActivityType = Me
	End Sub
	
	Private Sub detach_Activities(ByVal entity As Activity)
		Me.SendPropertyChanging
		entity.ActivityType = Nothing
	End Sub
End Class

<Table(Name:="dbo.ApiarySiteActivities")>  _
Partial Public Class ApiarySiteActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApiarySiteID As Integer
	
	Private _ActivityID As Integer
	
	Private _Activity As EntityRef(Of Activity)
	
	Private _ApiarySite As EntityRef(Of ApiarySite)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApiarySiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApiarySiteIDChanged()
    End Sub
    Partial Private Sub OnActivityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnActivityIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activity = CType(Nothing, EntityRef(Of Activity))
		Me._ApiarySite = CType(Nothing, EntityRef(Of ApiarySite))
		OnCreated
	End Sub
	
	<Column(Storage:="_ApiarySiteID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApiarySiteID() As Integer
		Get
			Return Me._ApiarySiteID
		End Get
		Set
			If ((Me._ApiarySiteID = value)  _
						= false) Then
				If Me._ApiarySite.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnApiarySiteIDChanging(value)
				Me.SendPropertyChanging
				Me._ApiarySiteID = value
				Me.SendPropertyChanged("ApiarySiteID")
				Me.OnApiarySiteIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActivityID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ActivityID() As Integer
		Get
			Return Me._ActivityID
		End Get
		Set
			If ((Me._ActivityID = value)  _
						= false) Then
				If Me._Activity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnActivityIDChanging(value)
				Me.SendPropertyChanging
				Me._ActivityID = value
				Me.SendPropertyChanged("ActivityID")
				Me.OnActivityIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Activity_ApiarySiteActivity", Storage:="_Activity", ThisKey:="ActivityID", OtherKey:="ActivityID", IsForeignKey:=true)>  _
	Public Property Activity() As Activity
		Get
			Return Me._Activity.Entity
		End Get
		Set
			Dim previousValue As Activity = Me._Activity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Activity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Activity.Entity = Nothing
					previousValue.ApiarySiteActivities.Remove(Me)
				End If
				Me._Activity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApiarySiteActivities.Add(Me)
					Me._ActivityID = value.ActivityID
				Else
					Me._ActivityID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Activity")
			End If
		End Set
	End Property
	
	<Association(Name:="ApiarySite_ApiarySiteActivity", Storage:="_ApiarySite", ThisKey:="ApiarySiteID", OtherKey:="ApiarySiteID", IsForeignKey:=true)>  _
	Public Property ApiarySite() As ApiarySite
		Get
			Return Me._ApiarySite.Entity
		End Get
		Set
			Dim previousValue As ApiarySite = Me._ApiarySite.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApiarySite.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApiarySite.Entity = Nothing
					previousValue.ApiarySiteActivities.Remove(Me)
				End If
				Me._ApiarySite.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApiarySiteActivities.Add(Me)
					Me._ApiarySiteID = value.ApiarySiteID
				Else
					Me._ApiarySiteID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ApiarySite")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Area")>  _
Partial Public Class Area
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AreaID As Integer
	
	Private _AreaDescription As String
	
	Private _ApiarySites As EntitySet(Of ApiarySite)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAreaIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAreaIDChanged()
    End Sub
    Partial Private Sub OnAreaDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnAreaDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApiarySites = New EntitySet(Of ApiarySite)(AddressOf Me.attach_ApiarySites, AddressOf Me.detach_ApiarySites)
		OnCreated
	End Sub
	
	<Column(Storage:="_AreaID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AreaID() As Integer
		Get
			Return Me._AreaID
		End Get
		Set
			If ((Me._AreaID = value)  _
						= false) Then
				Me.OnAreaIDChanging(value)
				Me.SendPropertyChanging
				Me._AreaID = value
				Me.SendPropertyChanged("AreaID")
				Me.OnAreaIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AreaDescription", DbType:="VarChar(255)")>  _
	Public Property AreaDescription() As String
		Get
			Return Me._AreaDescription
		End Get
		Set
			If (String.Equals(Me._AreaDescription, value) = false) Then
				Me.OnAreaDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._AreaDescription = value
				Me.SendPropertyChanged("AreaDescription")
				Me.OnAreaDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Area_ApiarySite", Storage:="_ApiarySites", ThisKey:="AreaID", OtherKey:="AreaID")>  _
	Public Property ApiarySites() As EntitySet(Of ApiarySite)
		Get
			Return Me._ApiarySites
		End Get
		Set
			Me._ApiarySites.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApiarySites(ByVal entity As ApiarySite)
		Me.SendPropertyChanging
		entity.Area = Me
	End Sub
	
	Private Sub detach_ApiarySites(ByVal entity As ApiarySite)
		Me.SendPropertyChanging
		entity.Area = Nothing
	End Sub
End Class

<Table(Name:="dbo.PrimaryResource")>  _
Partial Public Class PrimaryResource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PrimaryResourceID As Integer
	
	Private _PrimaryResourceDescription As String
	
	Private _ApiarySites As EntitySet(Of ApiarySite)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPrimaryResourceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPrimaryResourceIDChanged()
    End Sub
    Partial Private Sub OnPrimaryResourceDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryResourceDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApiarySites = New EntitySet(Of ApiarySite)(AddressOf Me.attach_ApiarySites, AddressOf Me.detach_ApiarySites)
		OnCreated
	End Sub
	
	<Column(Storage:="_PrimaryResourceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PrimaryResourceID() As Integer
		Get
			Return Me._PrimaryResourceID
		End Get
		Set
			If ((Me._PrimaryResourceID = value)  _
						= false) Then
				Me.OnPrimaryResourceIDChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryResourceID = value
				Me.SendPropertyChanged("PrimaryResourceID")
				Me.OnPrimaryResourceIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PrimaryResourceDescription", DbType:="VarChar(255)")>  _
	Public Property PrimaryResourceDescription() As String
		Get
			Return Me._PrimaryResourceDescription
		End Get
		Set
			If (String.Equals(Me._PrimaryResourceDescription, value) = false) Then
				Me.OnPrimaryResourceDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryResourceDescription = value
				Me.SendPropertyChanged("PrimaryResourceDescription")
				Me.OnPrimaryResourceDescriptionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="PrimaryResource_ApiarySite", Storage:="_ApiarySites", ThisKey:="PrimaryResourceID", OtherKey:="PrimaryResourceID")>  _
	Public Property ApiarySites() As EntitySet(Of ApiarySite)
		Get
			Return Me._ApiarySites
		End Get
		Set
			Me._ApiarySites.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApiarySites(ByVal entity As ApiarySite)
		Me.SendPropertyChanging
		entity.PrimaryResource = Me
	End Sub
	
	Private Sub detach_ApiarySites(ByVal entity As ApiarySite)
		Me.SendPropertyChanging
		entity.PrimaryResource = Nothing
	End Sub
End Class

<Table(Name:="dbo.Contact")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ContactID As Integer
	
	Private _District As String
	
	Private _ContactName As String
	
	Private _Email As String
	
	Private _Telephone As String
	
	Private _Fax As String
	
	Private _Mobile As String
	
	Private _UHF As String
	
	Private _AdditionalInfo As String
	
	Private _ApiarySites As EntitySet(Of ApiarySite)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContactIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnDistrictChanging(value As String)
    End Sub
    Partial Private Sub OnDistrictChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelephoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelephoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnUHFChanging(value As String)
    End Sub
    Partial Private Sub OnUHFChanged()
    End Sub
    Partial Private Sub OnAdditionalInfoChanging(value As String)
    End Sub
    Partial Private Sub OnAdditionalInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApiarySites = New EntitySet(Of ApiarySite)(AddressOf Me.attach_ApiarySites, AddressOf Me.detach_ApiarySites)
		OnCreated
	End Sub
	
	<Column(Storage:="_ContactID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ContactID() As Integer
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_District", DbType:="VarChar(255)")>  _
	Public Property District() As String
		Get
			Return Me._District
		End Get
		Set
			If (String.Equals(Me._District, value) = false) Then
				Me.OnDistrictChanging(value)
				Me.SendPropertyChanging
				Me._District = value
				Me.SendPropertyChanged("District")
				Me.OnDistrictChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContactName", DbType:="VarChar(255)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="VarChar(255)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Telephone", DbType:="VarChar(50)")>  _
	Public Property Telephone() As String
		Get
			Return Me._Telephone
		End Get
		Set
			If (String.Equals(Me._Telephone, value) = false) Then
				Me.OnTelephoneChanging(value)
				Me.SendPropertyChanging
				Me._Telephone = value
				Me.SendPropertyChanged("Telephone")
				Me.OnTelephoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Fax", DbType:="VarChar(50)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Mobile", DbType:="VarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UHF", DbType:="VarChar(50)")>  _
	Public Property UHF() As String
		Get
			Return Me._UHF
		End Get
		Set
			If (String.Equals(Me._UHF, value) = false) Then
				Me.OnUHFChanging(value)
				Me.SendPropertyChanging
				Me._UHF = value
				Me.SendPropertyChanged("UHF")
				Me.OnUHFChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AdditionalInfo", DbType:="VarChar(4000)")>  _
	Public Property AdditionalInfo() As String
		Get
			Return Me._AdditionalInfo
		End Get
		Set
			If (String.Equals(Me._AdditionalInfo, value) = false) Then
				Me.OnAdditionalInfoChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalInfo = value
				Me.SendPropertyChanged("AdditionalInfo")
				Me.OnAdditionalInfoChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_ApiarySite", Storage:="_ApiarySites", ThisKey:="ContactID", OtherKey:="ContactID")>  _
	Public Property ApiarySites() As EntitySet(Of ApiarySite)
		Get
			Return Me._ApiarySites
		End Get
		Set
			Me._ApiarySites.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApiarySites(ByVal entity As ApiarySite)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_ApiarySites(ByVal entity As ApiarySite)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
End Class

<Table(Name:="dbo.ApiarySite")>  _
Partial Public Class ApiarySite
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApiarySiteID As Integer
	
	Private _SiteNo As String
	
	Private _GPSLatitude As System.Nullable(Of Decimal)
	
	Private _GPSLongitude As System.Nullable(Of Decimal)
	
	Private _CommonName As String
	
	Private _PrimaryResourceID As System.Nullable(Of Integer)
	
	Private _LocationDescription As String
	
	Private _AreaID As System.Nullable(Of Integer)
	
	Private _DRA As System.Nullable(Of Boolean)
	
	Private _WC As System.Nullable(Of Boolean)
	
	Private _PL As System.Nullable(Of Boolean)
	
	Private _Zone As String
	
	Private _COGPlan As String
	
	Private _LandTenure As String
	
	Private _ManagementPlan As String
	
	Private _CALMDistrict As String
	
	Private _ContactID As System.Nullable(Of Integer)
	
	Private _Status As String
	
	Private _Map As String
	
	Private _Organic As Boolean
	
	Private _ApiarySiteActivities As EntitySet(Of ApiarySiteActivity)
	
	Private _Area As EntityRef(Of Area)
	
	Private _PrimaryResource As EntityRef(Of PrimaryResource)
	
	Private _Contact As EntityRef(Of Contact)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApiarySiteIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnApiarySiteIDChanged()
    End Sub
    Partial Private Sub OnSiteNoChanging(value As String)
    End Sub
    Partial Private Sub OnSiteNoChanged()
    End Sub
    Partial Private Sub OnGPSLatitudeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGPSLatitudeChanged()
    End Sub
    Partial Private Sub OnGPSLongitudeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGPSLongitudeChanged()
    End Sub
    Partial Private Sub OnCommonNameChanging(value As String)
    End Sub
    Partial Private Sub OnCommonNameChanged()
    End Sub
    Partial Private Sub OnPrimaryResourceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPrimaryResourceIDChanged()
    End Sub
    Partial Private Sub OnLocationDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnLocationDescriptionChanged()
    End Sub
    Partial Private Sub OnAreaIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAreaIDChanged()
    End Sub
    Partial Private Sub OnDRAChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDRAChanged()
    End Sub
    Partial Private Sub OnWCChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnWCChanged()
    End Sub
    Partial Private Sub OnPLChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPLChanged()
    End Sub
    Partial Private Sub OnZoneChanging(value As String)
    End Sub
    Partial Private Sub OnZoneChanged()
    End Sub
    Partial Private Sub OnCOGPlanChanging(value As String)
    End Sub
    Partial Private Sub OnCOGPlanChanged()
    End Sub
    Partial Private Sub OnLandTenureChanging(value As String)
    End Sub
    Partial Private Sub OnLandTenureChanged()
    End Sub
    Partial Private Sub OnManagementPlanChanging(value As String)
    End Sub
    Partial Private Sub OnManagementPlanChanged()
    End Sub
    Partial Private Sub OnCALMDistrictChanging(value As String)
    End Sub
    Partial Private Sub OnCALMDistrictChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnMapChanging(value As String)
    End Sub
    Partial Private Sub OnMapChanged()
    End Sub
    Partial Private Sub OnOrganicChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOrganicChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApiarySiteActivities = New EntitySet(Of ApiarySiteActivity)(AddressOf Me.attach_ApiarySiteActivities, AddressOf Me.detach_ApiarySiteActivities)
		Me._Area = CType(Nothing, EntityRef(Of Area))
		Me._PrimaryResource = CType(Nothing, EntityRef(Of PrimaryResource))
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		OnCreated
	End Sub
	
	<Column(Storage:="_ApiarySiteID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ApiarySiteID() As Integer
		Get
			Return Me._ApiarySiteID
		End Get
		Set
			If ((Me._ApiarySiteID = value)  _
						= false) Then
				Me.OnApiarySiteIDChanging(value)
				Me.SendPropertyChanging
				Me._ApiarySiteID = value
				Me.SendPropertyChanged("ApiarySiteID")
				Me.OnApiarySiteIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SiteNo", DbType:="VarChar(10)")>  _
	Public Property SiteNo() As String
		Get
			Return Me._SiteNo
		End Get
		Set
			If (String.Equals(Me._SiteNo, value) = false) Then
				Me.OnSiteNoChanging(value)
				Me.SendPropertyChanging
				Me._SiteNo = value
				Me.SendPropertyChanged("SiteNo")
				Me.OnSiteNoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GPSLatitude", DbType:="Decimal(18,5)")>  _
	Public Property GPSLatitude() As System.Nullable(Of Decimal)
		Get
			Return Me._GPSLatitude
		End Get
		Set
			If (Me._GPSLatitude.Equals(value) = false) Then
				Me.OnGPSLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._GPSLatitude = value
				Me.SendPropertyChanged("GPSLatitude")
				Me.OnGPSLatitudeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GPSLongitude", DbType:="Decimal(18,5)")>  _
	Public Property GPSLongitude() As System.Nullable(Of Decimal)
		Get
			Return Me._GPSLongitude
		End Get
		Set
			If (Me._GPSLongitude.Equals(value) = false) Then
				Me.OnGPSLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._GPSLongitude = value
				Me.SendPropertyChanged("GPSLongitude")
				Me.OnGPSLongitudeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CommonName", DbType:="VarChar(255)")>  _
	Public Property CommonName() As String
		Get
			Return Me._CommonName
		End Get
		Set
			If (String.Equals(Me._CommonName, value) = false) Then
				Me.OnCommonNameChanging(value)
				Me.SendPropertyChanging
				Me._CommonName = value
				Me.SendPropertyChanged("CommonName")
				Me.OnCommonNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PrimaryResourceID", DbType:="Int")>  _
	Public Property PrimaryResourceID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryResourceID
		End Get
		Set
			If (Me._PrimaryResourceID.Equals(value) = false) Then
				If Me._PrimaryResource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnPrimaryResourceIDChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryResourceID = value
				Me.SendPropertyChanged("PrimaryResourceID")
				Me.OnPrimaryResourceIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LocationDescription", DbType:="VarChar(255)")>  _
	Public Property LocationDescription() As String
		Get
			Return Me._LocationDescription
		End Get
		Set
			If (String.Equals(Me._LocationDescription, value) = false) Then
				Me.OnLocationDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._LocationDescription = value
				Me.SendPropertyChanged("LocationDescription")
				Me.OnLocationDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AreaID", DbType:="Int")>  _
	Public Property AreaID() As System.Nullable(Of Integer)
		Get
			Return Me._AreaID
		End Get
		Set
			If (Me._AreaID.Equals(value) = false) Then
				If Me._Area.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnAreaIDChanging(value)
				Me.SendPropertyChanging
				Me._AreaID = value
				Me.SendPropertyChanged("AreaID")
				Me.OnAreaIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DRA", DbType:="Bit")>  _
	Public Property DRA() As System.Nullable(Of Boolean)
		Get
			Return Me._DRA
		End Get
		Set
			If (Me._DRA.Equals(value) = false) Then
				Me.OnDRAChanging(value)
				Me.SendPropertyChanging
				Me._DRA = value
				Me.SendPropertyChanged("DRA")
				Me.OnDRAChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WC", DbType:="Bit")>  _
	Public Property WC() As System.Nullable(Of Boolean)
		Get
			Return Me._WC
		End Get
		Set
			If (Me._WC.Equals(value) = false) Then
				Me.OnWCChanging(value)
				Me.SendPropertyChanging
				Me._WC = value
				Me.SendPropertyChanged("WC")
				Me.OnWCChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PL", DbType:="Bit")>  _
	Public Property PL() As System.Nullable(Of Boolean)
		Get
			Return Me._PL
		End Get
		Set
			If (Me._PL.Equals(value) = false) Then
				Me.OnPLChanging(value)
				Me.SendPropertyChanging
				Me._PL = value
				Me.SendPropertyChanged("PL")
				Me.OnPLChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Zone", DbType:="VarChar(10)")>  _
	Public Property Zone() As String
		Get
			Return Me._Zone
		End Get
		Set
			If (String.Equals(Me._Zone, value) = false) Then
				Me.OnZoneChanging(value)
				Me.SendPropertyChanging
				Me._Zone = value
				Me.SendPropertyChanged("Zone")
				Me.OnZoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_COGPlan", DbType:="VarChar(255)")>  _
	Public Property COGPlan() As String
		Get
			Return Me._COGPlan
		End Get
		Set
			If (String.Equals(Me._COGPlan, value) = false) Then
				Me.OnCOGPlanChanging(value)
				Me.SendPropertyChanging
				Me._COGPlan = value
				Me.SendPropertyChanged("COGPlan")
				Me.OnCOGPlanChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LandTenure", DbType:="VarChar(255)")>  _
	Public Property LandTenure() As String
		Get
			Return Me._LandTenure
		End Get
		Set
			If (String.Equals(Me._LandTenure, value) = false) Then
				Me.OnLandTenureChanging(value)
				Me.SendPropertyChanging
				Me._LandTenure = value
				Me.SendPropertyChanged("LandTenure")
				Me.OnLandTenureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ManagementPlan", DbType:="VarChar(255)")>  _
	Public Property ManagementPlan() As String
		Get
			Return Me._ManagementPlan
		End Get
		Set
			If (String.Equals(Me._ManagementPlan, value) = false) Then
				Me.OnManagementPlanChanging(value)
				Me.SendPropertyChanging
				Me._ManagementPlan = value
				Me.SendPropertyChanged("ManagementPlan")
				Me.OnManagementPlanChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CALMDistrict", DbType:="VarChar(255)")>  _
	Public Property CALMDistrict() As String
		Get
			Return Me._CALMDistrict
		End Get
		Set
			If (String.Equals(Me._CALMDistrict, value) = false) Then
				Me.OnCALMDistrictChanging(value)
				Me.SendPropertyChanging
				Me._CALMDistrict = value
				Me.SendPropertyChanged("CALMDistrict")
				Me.OnCALMDistrictChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContactID", DbType:="Int")>  _
	Public Property ContactID() As System.Nullable(Of Integer)
		Get
			Return Me._ContactID
		End Get
		Set
			If (Me._ContactID.Equals(value) = false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="VarChar(255)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Map", DbType:="VarChar(255)")>  _
	Public Property Map() As String
		Get
			Return Me._Map
		End Get
		Set
			If (String.Equals(Me._Map, value) = false) Then
				Me.OnMapChanging(value)
				Me.SendPropertyChanging
				Me._Map = value
				Me.SendPropertyChanged("Map")
				Me.OnMapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Organic")>  _
	Public Property Organic() As Boolean
		Get
			Return Me._Organic
		End Get
		Set
			If ((Me._Organic = value)  _
						= false) Then
				Me.OnOrganicChanging(value)
				Me.SendPropertyChanging
				Me._Organic = value
				Me.SendPropertyChanged("Organic")
				Me.OnOrganicChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ApiarySite_ApiarySiteActivity", Storage:="_ApiarySiteActivities", ThisKey:="ApiarySiteID", OtherKey:="ApiarySiteID")>  _
	Public Property ApiarySiteActivities() As EntitySet(Of ApiarySiteActivity)
		Get
			Return Me._ApiarySiteActivities
		End Get
		Set
			Me._ApiarySiteActivities.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Area_ApiarySite", Storage:="_Area", ThisKey:="AreaID", OtherKey:="AreaID", IsForeignKey:=true)>  _
	Public Property Area() As Area
		Get
			Return Me._Area.Entity
		End Get
		Set
			Dim previousValue As Area = Me._Area.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Area.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Area.Entity = Nothing
					previousValue.ApiarySites.Remove(Me)
				End If
				Me._Area.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApiarySites.Add(Me)
					Me._AreaID = value.AreaID
				Else
					Me._AreaID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Area")
			End If
		End Set
	End Property
	
	<Association(Name:="PrimaryResource_ApiarySite", Storage:="_PrimaryResource", ThisKey:="PrimaryResourceID", OtherKey:="PrimaryResourceID", IsForeignKey:=true)>  _
	Public Property PrimaryResource() As PrimaryResource
		Get
			Return Me._PrimaryResource.Entity
		End Get
		Set
			Dim previousValue As PrimaryResource = Me._PrimaryResource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PrimaryResource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PrimaryResource.Entity = Nothing
					previousValue.ApiarySites.Remove(Me)
				End If
				Me._PrimaryResource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApiarySites.Add(Me)
					Me._PrimaryResourceID = value.PrimaryResourceID
				Else
					Me._PrimaryResourceID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PrimaryResource")
			End If
		End Set
	End Property
	
	<Association(Name:="Contact_ApiarySite", Storage:="_Contact", ThisKey:="ContactID", OtherKey:="ContactID", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.ApiarySites.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApiarySites.Add(Me)
					Me._ContactID = value.ContactID
				Else
					Me._ContactID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApiarySiteActivities(ByVal entity As ApiarySiteActivity)
		Me.SendPropertyChanging
		entity.ApiarySite = Me
	End Sub
	
	Private Sub detach_ApiarySiteActivities(ByVal entity As ApiarySiteActivity)
		Me.SendPropertyChanging
		entity.ApiarySite = Nothing
	End Sub
End Class
